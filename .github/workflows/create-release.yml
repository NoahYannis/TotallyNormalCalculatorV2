name: build-deploy

on:
  push:
    tags:
      - "totally-normal-calculator/v*"

  workflow_dispatch:

env:
  PROJECT_PATH: TotallyNormalCalculator/TotallyNormalCalculator.csproj
  PROJECT_PATH_TESTS: TotallyNormalCalculator.UnitTests/TotallyNormalCalculator.UnitTests.csproj

jobs:
  create-release:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
          include-prerelease: true


      - name: Create .env file
        run: |
          echo "AZURE_COSMOS_DB_CONNECTION_STRING=${{ secrets.AZURE_COSMOS_DB_CONNECTION_STRING }}" > .env
          echo "AZURE_BLOB_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING }}" >> .env
        # Erstelle die .env-Datei im Root-Verzeichnis des Repositories

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
         envkey_DEBUG: false
         envkey_AZURE_COSMOS_DB_CONNECTION_STRING: ${{ secrets.AZURE_COSMOS_DB_CONNECTION_STRING }}
         envkey_AZURE_BLOB_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING }}
         fail_on_empty: true
         directory: TotallyNormalCalculator


      - name: Verify .env file
        run: |
          if (-Not (Test-Path .env)) {
            Write-Host ".env file was not created"
            exit 1
          } else {
            Write-Host ".env file contents:"
            Get-Content .env
          }
        # Überprüfe, ob die .env-Datei erstellt wurde und zeige ihren Inhalt an

      - name: Copy .env file to publish directory
        run: |
          # Stelle sicher, dass das Verzeichnis existiert und kopiere die .env-Datei hinein
          $publishDir = "TotallyNormalCalculator/bin/Release/net8.0-windows/win-x64/publish"
          if (-Not (Test-Path $publishDir)) {
            New-Item -ItemType Directory -Path $publishDir
          }
          Copy-Item .env -Destination "$publishDir/.env"
        # Kopiere die .env-Datei in das Veröffentlichungsverzeichnis


      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Build
        run: dotnet build -c Release -p:PublishSingleFile=true

      - name: Execute Unit Tests
        run: dotnet test ${{ env.PROJECT_PATH_TESTS }}

      - name: Publish # Anwendung als einzelne ausführbare Datei veröffentlichen
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:UseAppHost=true --self-contained

      - name: Verify .env file in publish directory
        run: |
          if (-Not (Test-Path TotallyNormalCalculator/bin/Release/net8.0-windows/win-x64/publish/.env)) {
            Write-Host ".env file was not copied to the publish directory"
            exit 1
          } else {
            Write-Host ".env file in publish directory contents:"
            Get-Content TotallyNormalCalculator/bin/Release/net8.0-windows/win-x64/publish/.env
          }

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}  # Bei privaten Repositories Personal Access Token statt GITHUB_TOKEN verwenden
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}

      - name: Add EXE To Release
        uses: csexton/release-asset-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          pattern: TotallyNormalCalculator/bin/Release/net8.0-windows/win-x64/publish/*.exe # Exe-Datei dem Release hinzufügen
          release-url: ${{ steps.create_release.outputs.upload_url }}
