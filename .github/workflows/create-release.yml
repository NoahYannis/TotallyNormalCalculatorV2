name: build-deploy

on:
  push:
    tags:
      - "totally-normal-calculator/v*"

  workflow_dispatch:

env:
  PROJECT_PATH: TotallyNormalCalculator/TotallyNormalCalculator.csproj
  PROJECT_PATH_TESTS: TotallyNormalCalculator.UnitTests/TotallyNormalCalculator.UnitTests.csproj
  AZURE_BLOB_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING }}
  AZURE_COSMOS_DB_CONNECTION_STRING: ${{ secrets.AZURE_COSMOS_DB_CONNECTION_STRING }}
 

jobs:
  create-release:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
          include-prerelease: true

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Set Environment Variables
        run: |
          echo "AZURE_BLOB_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING }}" >> $GITHUB_ENV
          echo "AZURE_COSMOS_DB_CONNECTION_STRING=${{ secrets.AZURE_COSMOS_DB_CONNECTION_STRING }}" >> $GITHUB_ENV

      - name: Set User Secrets
        run: |
         dotnet user-secrets init --project ${{ env.PROJECT_PATH }}
          dotnet user-secrets set "AZURE_BLOB_STORAGE_CONNECTION_STRING" "${{ secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING }}" --project ${{ env.PROJECT_PATH }}
          dotnet user-secrets set "AZURE_COSMOS_DB_CONNECTION_STRING" "${{ secrets.AZURE_COSMOS_DB_CONNECTION_STRING }}" --project ${{ env.PROJECT_PATH }}
          dotnet user-secrets list --project ${{ env.PROJECT_PATH }}


      - name: Print Environment Variables for Debugging
        run: |
          echo "AZURE_BLOB_STORAGE_CONNECTION_STRING=${{ env.AZURE_BLOB_STORAGE_CONNECTION_STRING }}"
          echo "AZURE_COSMOS_DB_CONNECTION_STRING=${{ env.AZURE_COSMOS_DB_CONNECTION_STRING }}"


      - name: Ensure app.config exists
        run: |
          if (-Not (Test-Path "TotallyNormalCalculator/App.config")) {
            # Erstelle die app.config, falls sie nicht existiert
            $configContent = @"
            <configuration>
              <connectionStrings>
                <add name="BlobStorageConnectionString" connectionString=""/>
                <add name="CosmosDbConnectionString" connectionString=""/>
              </connectionStrings>
            </configuration>
            "@
            $configContent | Out-File -FilePath "TotallyNormalCalculator/App.config" -Encoding UTF8
          }

      - name: Inject Connection Strings into app.config
        run: |
          [xml]$config = Get-Content "TotallyNormalCalculator/App.config"
          $blobStorageConnectionStringNode = $config.configuration.connectionStrings.add | Where-Object { $_.name -eq "BlobStorageConnectionString" }
          if ($blobStorageConnectionStringNode) {
            $blobStorageConnectionStringNode.connectionString = "${{ secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING }}"
          } else {
            $addBlobStorage = $config.CreateElement("add")
            $addBlobStorage.SetAttribute("name", "BlobStorageConnectionString")
            $addBlobStorage.SetAttribute("connectionString", "${{ secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING }}")
            $config.configuration.connectionStrings.AppendChild($addBlobStorage) | Out-Null
          }

          $cosmosDbConnectionStringNode = $config.configuration.connectionStrings.add | Where-Object { $_.name -eq "CosmosDbConnectionString" }
          if ($cosmosDbConnectionStringNode) {
            $cosmosDbConnectionStringNode.connectionString = "${{ secrets.AZURE_COSMOS_DB_CONNECTION_STRING }}"
          } else {
            $addCosmosDb = $config.CreateElement("add")
            $addCosmosDb.SetAttribute("name", "CosmosDbConnectionString")
            $addCosmosDb.SetAttribute("connectionString", "${{ secrets.AZURE_COSMOS_DB_CONNECTION_STRING }}")
            $config.configuration.connectionStrings.AppendChild($addCosmosDb) | Out-Null
          }

          $config.Save("TotallyNormalCalculator/App.config")

      - name: Build
        run: dotnet build -c Release -p:PublishSingleFile=true

      - name: Execute Unit Tests
        run: dotnet test ${{ env.PROJECT_PATH_TESTS }}

      - name: Publish # Anwendung als einzelne ausführbare Datei veröffentlichen
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:UseAppHost=true --self-contained

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}  # Bei privaten Repositories Personal Access Token statt GITHUB_TOKEN verwenden
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}

      - name: Add EXE To Release
        uses: csexton/release-asset-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          pattern: TotallyNormalCalculator/bin/Release/net8.0-windows/win-x64/publish/*.exe # Exe-Datei dem Release hinzufügen
          release-url: ${{ steps.create_release.outputs.upload_url }}
